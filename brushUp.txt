Time tracking:
-------------
Javascript Ninja:
  Study: 10 hours (nice)

Misc:
    1 - watching video https://app.pluralsight.com/player?course=developer-job-interviews&author=john-sonmez&name=job-interview-m1-intro&clip=4&mode=live
    1 = " also working on flashcards
    1 working on flashcards
    .5 mgmt stuff & flashcards
    .5 namely app

Mathworks:
    .5 getting interview info
    1 did string problem
    .5 started numeric expr exercise
    1 numeric exercise
    .5 MATLAB: https://app.pluralsight.com/player?course=matlab-fundamentals&author=dmitri-nesteruk&name=matlab-fundamentals-m01&clip=0&mode=live
    .5 flashcards app
    .5 questions and java work
    .5 flashcards
    1 flashcards
    .5 flashcards
    .5 flashcards and wayfarer
    .5 mathlab training
    .5 flashcards
    1 hour resume
    .5 flashcards
    1 resume
    .5 interview skills
    1.5 interview prep
    1.5 interview prep
    1.5 interview prep
    
React:
    .5 hr restarted training
    .5 jscomplete & https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=2
    .5 react steam app https://jscomplete.com/repl
    1 review & starting https://app.pluralsight.com/player?course=react-fundamentals&author=liam-mclennan&name=react-fundamentals-m1-introducing&clip=0
    see below for repl work:
    .5 starting steam react lib at /Users/ascavone/sites/github/learning/react/steamLibrary
    .5 redux
    .5 redux

notes:
- AMD vs CommonJS
  https://auth0.com/blog/javascript-module-systems-showdown/
  AMD(require.js) better: async, a bit grosser syntactically
  CommonJS: node (not quite), require and exports, sync API or use browserify

TODO:
- more design patterns
- strengths and weaknesses
    {
        {
         manager:  
            str: I have a great intuition into what motivates people and keeps them happy.  I think this is something that many processes take for granted in the industry.  For example, some people want to drive along making progress and checking boxes and scrum can be good for them.  Other people are more interested in the problem as a whole, and a more waterfallish way of doing things can be better.  I think there are ways that you can tailor things for particular people or at least step in as a MGR to help on the things they don't like to do : i.e. making tix for people 

            weak: 
        }
        {
         programmer:
            str: I'm a big picture person who doesn't get too concerned with minor implementation details.  I'm more concerned with maintainability and sustainability than whether or not you can structure your code to take advantage of the latest javascript engine performance upgrades.  I'm not into preemptive optimization - I've found that if you worry about the big picture w/r/t design, performance problems usually aren't much of an issue, and if they are, they are spot changes just like bug fixes

            weak: I have a difficult time keeping up with the latest and greatest.  I find that so many things that come out are simply minor steps (forwards or back) on things that have already been iterated on.  And I'm really not too interested in things until they've been out for a year or two because as I said, I'm about sustainability - if something isn't sustainable, than you can have as many todo list blog posts as you like, but it isn't going to last.  <HOW DO I DEAL WITH IT?>

        }
    }

- disagreement with a coworker
  find a situation when I was wrong and came around.  Maybe code reviews?
- sign back up for that newsletter
- design pattern course pluralsight
- steve smith plural sight OO course.  SOLID
- enhance an object with a new function
- class with prototype
- closures tests

x spend some time on sublime dev env
x primitives
x currying



Javascript questions:
--------------------

Explain how prototypal inheritance works
Explain why the following doesn't work as an IIFE: function foo(){ }();.
What needs to be changed to properly make it an IIFE?
What's the difference between a variable that is: null, undefined or undeclared?
How would you go about checking for any of these states?
What is a closure, and how/why would you use one?
What's a typical use case for anonymous functions?
How do you organize your code? (module pattern, classical inheritance?)
What's the difference between host objects and native objects?
Difference between: function Person(){}, var person = Person(), and var person = new Person()?
What's the difference between .call and .apply?
Explain Function.prototype.bind.
When would you use document.write()?
What's the difference between feature detection, feature inference, and using the UA string?
Explain Ajax in as much detail as possible.
What are the advantages and disadvantages of using Ajax?
Explain how JSONP works (and how it's not really Ajax).
Have you ever used JavaScript templating?
If so, what libraries have you used?
Explain "hoisting".
Describe event bubbling.
What's the difference between an "attribute" and a "property"?
Why is extending built-in JavaScript objects not a good idea?
Difference between document load event and document DOMContentLoaded event?
What is the difference between == and ===?
Explain the same-origin policy with regards to JavaScript.
Make this work:
duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]
Why is it called a Ternary expression, what does the word "Ternary" indicate?
What is "use strict";? what are the advantages and disadvantages to using it?
Create a for loop that iterates up to 100 while outputting "fizz" at multiples of 3, "buzz" at multiples of 5 and "fizzbuzz" at multiples of 3 and 5
Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?
Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?
Explain what a single page app is and how to make one SEO-friendly.
What is the extent of your experience with Promises and/or their polyfills?
What are the pros and cons of using Promises instead of callbacks?
What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?
What tools and techniques do you use debugging JavaScript code?
What language constructions do you use for iterating over object properties and array items?
Explain the difference between mutable and immutable objects.
What is an example of an immutable object in JavaScript?
What are the pros and cons of immutability?
How can you achieve immutability in your own code?
Explain the difference between synchronous and asynchronous functions.
What is event loop?
What is the difference between call stack and task queue?
Explain the differences on the usage of foo between function foo() {} and var foo = function() {}
